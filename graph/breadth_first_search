
Map breadth(List<List<int>> g, int s, int e){
  Map result={};
  Map<int,int> paths={};
  
  List<List<int>> L=[[s]];

  

  int i=1;
  while(L[i-1].isNotEmpty){
   List<int> mergedL= listMerger(L);
    List<int> futureLi=[];
   
    for(int j=0; j<L[i-1].length;j++){
    
      for(int k=0; k< g[L[i-1][j]].length; k++){
        final int adjVertus=g[L[i-1][j]][k];
        if(!paths.containsKey(adjVertus))
        {paths[adjVertus]= L[i-1][j];}
        if(!mergedL.contains(adjVertus)){
          futureLi.add(adjVertus);
         
        }
      }
    }
   
    List<int> cleaningList= futureLi.toSet().toList();
          L.add(cleaningList);
    i++;
  }
    
  result['Layer']= L;
  result['Paths']=paths;
  
  //find the path from s to e
  List<int> pathList=  pathFinder(paths,s,e);
  
 result['Path to $e']= pathList;
  result['Distance from $s to $e']= pathList.length-1;
  return result;
}
// merges big list into simple list for checking if node is visited
List<int> listMerger(List<List<int>> list){
  List<int> merge=[];
  
  for(int i=0; i< list.length; i++){
    for(int j=0; j< list[i].length;j++){
    merge.add(list[i][j]);}

  }
  return merge;
}

List<int> pathFinder(Map<int,int> parents,int s, int e){
  List<int> rezult=[];
  int counter=e;
 while(counter!=s){
    if(parents.containsKey(counter)){
      rezult.add(counter);
      counter= parents[counter]??0;
    }
  }
  rezult.add(s);
 List<int> reversedRez= rezult.reversed.toList();
  return reversedRez;
}


